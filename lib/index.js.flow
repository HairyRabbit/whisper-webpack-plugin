// @flow

declare class Class1 {
  static $call(message?: string): Class1;
  static captureStackTrace(target: Object, constructor?: Function): void;
  static prepareStackTrace: (err: Class1, stack: Array<CallSite>) => mixed;
  static stackTraceLimit: number;

  columnNumber?: number;
  description?: string;
  fileName?: string;
  lineNumber?: number;
  message: string;
  name: string;
  number?: number;
  stack: string;
  constructor(message?: mixed): void;
  toString(): string;
}
declare class Class0 {

  assets: Array<Object>;
  cost: number;
  errors: Array<Class1>;
  id: number;
  prevCost: number;
  result: "done" | "fail";
  shorter: Function;
  type: "init" | "inc";
  warnings: Array<string>;
  constructor(id: number, type: "init" | "inc", prevCost: number, cost: number, result: "done" | "fail", assets: Array<Object>, warnings: Array<string>, errors: Array<Class1>, shorter: Function): void;
  toString(printWarning?: boolean): string;
}
export type Options = {checkSilent: boolean, colors: boolean, reasons: boolean, warnings: boolean};
declare export default class {

  errors: Array<mixed /* UNEXPECTED TYPE: ExistsT */>;
  initBuild: boolean;
  options: {checkSilent: boolean, colors: boolean, reasons: boolean, warnings: boolean};
  tasks: Array<Class0>;
  apply(compiler: any): void;
  constructor(options: {checkSilent: boolean, colors: boolean, reasons: boolean, warnings: boolean}): void;
  reportSilent(options: Object): void;
}

