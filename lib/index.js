"use strict";function _interopDefault(t){return t&&"object"==typeof t&&"default"in t?t.default:t}function format(t,e=2){const s=["B","KB","MB","MB","TB","PB","EB","ZB","YB"];let i=parseInt(t),o=s.shift(),n=1e3;for(;i>=n;)i/=n,o=s.shift(),n=1024;return"B"===o?i+" "+o:i.toFixed(e)+" "+o}function format$1(t){let e,s,i,o,n=parseInt(t);n>=36e5&&(n-=36e5*(e=parseInt(n/36e5))),n>=6e4&&(n-=6e4*(s=parseInt(n/6e4))),n>=1e3&&(n-=1e3*(i=parseInt(n/1e3))),o=n;let r=[];return e&&r.push(String(e)+"h"),s&&r.push(String(s)+"min"),i&&r.push(String(i)+"s"),r.push(String(o)+"ms"),r.join(" ")}function moduleNotFoundRender(t,e,s=!0){t.origin.readableIdentifier(e);const i=t.dependencies;assert(1===i.length);const o=i[0].loc,n=t.origin._source._value,r=t.message,a=(t.name,formatLocation(o).split(":"),r.match(/Module not found: Error: Can't resolve '([^']+)' in '([^']+)'/)[1]);codeFrame.codeFrameColumns(n,o,{highlightCode:s}),t.missing.find(t=>/node_modules/.test(t))&&(`Forget to install "${a}"? Try to run "yarn add ${a}"`,`Forget to configure "resolve.alias"? Add it to your webpack options:\n\n// webpack.config.js\n{\n  resolve: {\n    alias: {\n      '${a}': {path/to/${a}}\n    }\n  }\n}\n`)}Object.defineProperty(exports,"__esModule",{value:!0});var assert=_interopDefault(require("assert")),codeFrame=require("@babel/code-frame"),formatLocation=_interopDefault(require("webpack/lib/formatLocation")),chalk=_interopDefault(require("chalk")),console_table=require("console.table"),RequestShortener=_interopDefault(require("webpack/lib/RequestShortener"));class Task{constructor(t,e,s,i,o,n,r,a,h){this.id=void 0,this.type=void 0,this.prevCost=void 0,this.cost=void 0,this.assets=void 0,this.result=void 0,this.warnings=void 0,this.errors=void 0,this.shorter=void 0,this.id=t,this.type=e,this.prevCost=s,this.cost=i,this.result=o,this.assets=n,this.warnings=r,this.errors=a,this.shorter=h}toString(t=!0){const e="done"===this.result,s=e?"Done":"Ooops",i="init"===this.type?"initial build":"incremental build",o=format$1(Math.abs(this.prevCost-this.cost)),n=this.prevCost?" "+(this.prevCost>this.cost?chalk.green("-"+o):chalk.red("+"+o)):"",r=e?"Generate files":"Errors",a=this.errors.length,h=this.warnings.length;let l=`${s}, ${i} ${format$1(this.cost)}${n}, ${chalk.bold[h>0?"red":"blue"](h)} warnings ${chalk.bold[a>0?"red":"blue"](a)} errors, ${r}:\n\n`+(e?console_table.getTable(this.assets.map(t=>{const e=t.name;const s=format(t.size);const i=t.chunkNames.join(" ");return{name:e,size:s,chunks:i}})).replace(/(-+)/g,(t,e)=>chalk.blue(e)):this.errors.map((t,e)=>{t="ModuleNotFoundError"===t.name?moduleNotFoundRender(t,this.shorter):t.toString();return String(e+1)+". "+t+"\n"}).join("\n"));return!1===t||0===this.warnings.length?l:(l+=`Warnings:\n`,l+=this.warnings.map((t,e)=>String(e+1)+". "+t).join("\n"))}}const defaultOptions={warnings:!0,colors:!0,reasons:!0,checkSilent:!0};class WhisperWebpackPlugin{constructor(t){this.options=void 0,this.errors=void 0,this.initBuild=void 0,this.tasks=void 0,this.options=Object.assign({},defaultOptions,t),this.errors=[],this.tasks=[],this.initBuild=!0}apply(t){this.options.checkSilent&&this.reportSilent(t.options),t.plugin("compile",()=>{console.log("Webpack compiling...")}),t.plugin("after-emit",(t,e)=>{this.errors=t.errors;e()}),t.plugin("done",e=>{const s=e.toJson({colors:this.options.colors,errorDetails:!1});const i=s.warnings;const o=s.time;const n=s.hash;const r=s.assets;const a=this.errors.length>0;const h=new RequestShortener(t.options.context);const l=new Task(n,this.initBuild?"init":"inc",this.tasks.length>1?this.tasks[this.tasks.length-1].cost:0,o,a?"fail":"done",r,i,this.errors,h);!0===this.initBuild&&(this.initBuild=!1);this.tasks.push(l);console.log(l.toString(this.options.warnings))})}reportSilent(t){this.options.devServer?this.options.devServer.quite||this.options.devServer.stats:this.options.stats,console.log(`webpack not works on silent mode, check your webpack.config.js:\nif use webpack-dev-server:\n\n{\n  quite: ${chalk.blue("true")}\n}\n\nor use webpack on watch mode:\n\n{\n  stats: ${chalk.green(`'none'`)}\n}\n`)}}exports.default=WhisperWebpackPlugin;
